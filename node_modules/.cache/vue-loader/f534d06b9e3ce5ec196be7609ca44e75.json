{"remainingRequest":"/Users/Apple/Project/Rush/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/Apple/Project/Rush/src/views/Map.vue?vue&type=style&index=0&id=26bca5dc&scoped=true&lang=css&","dependencies":[{"path":"/Users/Apple/Project/Rush/src/views/Map.vue","mtime":1550242085765},{"path":"/Users/Apple/Project/Rush/node_modules/css-loader/index.js","mtime":1546418993225},{"path":"/Users/Apple/Project/Rush/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1546418993639},{"path":"/Users/Apple/Project/Rush/node_modules/postcss-loader/src/index.js","mtime":1546418993502},{"path":"/Users/Apple/Project/Rush/node_modules/cache-loader/dist/cjs.js","mtime":1546418993104},{"path":"/Users/Apple/Project/Rush/node_modules/vue-loader/lib/index.js","mtime":1546418993639}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.navbar {\n  background-color: #FDB849;\n  height: 60px;\n  position: fixed;\n  overflow: hidden;\n  width: 100%;\n  top: 0;\n}\n\n.navbar-menu {\n  margin-right: 0px !important;\n  margin-left: 0px;\n}\n\n.navbar-start {\n  padding-left: 12px;\n}\n\n.navbar-end {\n  padding-right: 10px;\n}\n",{"version":3,"sources":["Map.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0LA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA","file":"Map.vue","sourceRoot":"src/views","sourcesContent":["<template>\n<div class=\"container is-fullhd\" style=\"height:100%;\">\n     <nav class=\"navbar\" role=\"navigation\" aria-label=\"main navigation\">\n      <div class=\"navbar-menu\">\n        <div class=\"navbar-start\">\n          <div class=\"navbar-item\">\n            <a class=\"button is-text is-myBack\" @click=\"$router.push({name: 'select', params:{group:group, name:name}})\"><span class=\"icon\"><i class=\"fas fa-chevron-left\"></i></span></a>\n         <div class=\"navbar-brand\">\n        <a class=\"navbar-item\">\n          <!-- <img src=\"@/assets/RUSHlogo.png\" alt=\"logo\" class=\"logo\"> -->\n            <h5 class=\"subtitle is-4 has-text-dark\">{{name}}</h5>\n        </a>\n      </div>\n          </div>\n        </div>\n      </div>\n    </nav>\n    <br><br>\n<div class=\"columns\">\n    <!-- <img src=\"http://localhost:8000/stores/mapimage/sample/sample\"> -->\n    <div style=\"overflow-y: scroll; height:1200px;\">\n    <div id=\"drawing\"></div>\n    </div>\n    </div>\n</div>    \n</template>\n\n<script>\nexport default {\n    data () {\n        return {\n            group: '',\n            name: '',\n            items_string: '',\n            items: [],\n\n            points: {}\n\n        }\n    },\n    mounted () {\n\n        // var map_image = image('http://localhost:8000/stores/mapimage/sample/sample')\n        // console.log(map_image.width)\n        // console.log(map_image.height)\n\n        var draw = SVG('drawing').size(1000, 1000)\n\n        var group = this.group\n        var name = this.name\n        // draw.rect(500, 500).move(100, 100).fill('#f06')\n\n        // var image = draw.image('http://localhost:8000/stores/mapimage/sample/sample')\n        // console.log(image.width())\n        // console.log(image.height())\n        // console.log(image)\n\n        // var image_url = 'http://localhost:8000/stores/mapimage/${this.group}/${this.name}'\n        var image = draw.image('http://localhost:8000/stores/mapimage/'+group+'/'+name).loaded(function(loader) {\n            this.size(loader.width, loader.height)\n            // console.log(this.width())\n            // console.log(this.height())\n        })\n\n        this.$http.get('http://localhost:8000/stores/mappoint/'+group+'/'+name)\n        .then(response => {\n            console.log(response.data)\n            // draw point\n            var data = response.data\n            this.points = data\n\n            this.$http.get('http://localhost:8000/stores/'+group+'/'+name+'/route/'+this.items_string)\n            .then(response => {\n                // console.log(response.data)\n\n                var path = response.data.path\n\n                var path_point = []\n                var select_path_point = []\n                // var current = path[0]\n                // for (var i = 1; i < path.length; i++) {\n                    //     console.log(path[i])\n                //     console.log(this.points)\n                //     var pre_x = this.points[current][0]\n                //     var pre_y = this.points[current][1]\n\n                //     var cur_x = this.points[path[i]][0]\n                //     var cur_y = this.points[path[i]][1]\n\n                //     var line = draw.line(pre_x, pre_y, cur_x, cur_y).stroke({ width: 1 })\n\n                //     current = path[i]\n                // }\n                for (var i = 0; i < path.length; i++) {\n                    path_point.push([this.points[path[i]][0], this.points[path[i]][1]])\n                }\n                // console.log(path_point)\n\n                var keys = this.items_string.split(';')\n                this.$http.get('http://localhost:8000/stores/'+group+'/'+name)\n                .then(response => {\n                    console.log('AAAAAAA')\n                    console.log(response.data)\n                    var names = response.data\n                    \n                    for (var key in data) {\n                        // console.log(data[key])\n        \n                        if (key in names) {\n                            \n                            var x = data[key][0]\n                            var y = data[key][1]\n                            draw.circle(10).attr({fill: '#000', 'fill-opacity': 0.15}).move(x-5, y-5)\n                        }\n                    }\n\n                    var polyline = draw.polyline(path_point)\n                    polyline.fill('none')\n                    polyline.stroke({ color: '#f06', width: 4, linecap: 'round', linejoin: 'round', 'opacity':0.6 })\n                    \n                    for (var i = 0; i < keys.length; i++) {\n                        // select_path_point.push([this.points[keys[i]][0], this.points[keys[i]][1]])\n                        var x = this.points[keys[i]][0]\n                        var y = this.points[keys[i]][1]\n                        draw.circle(20).attr({fill: '#f06', 'fill-opacity': 1}).center(x, y)\n                    }\n                    // polyline.animate(3000).plot(path_point)\n\n                    draw.circle(25).attr({fill: '#4b7', 'fill-opacity': 1}).center(this.points['START'][0], this.points['START'][1])\n                    draw.circle(25).attr({fill: '#4b7', 'fill-opacity': 1}).center(this.points['END'][0], this.points['END'][1])\n\n                    var path_string = 'm '+path_point[0][0] + ',' + path_point[0][1] + ' '\n                    for (var i = 1; i < path_point.length; i++) {\n                        path_string += (path_point[i][0] - path_point[i-1][0]) + ',' + (path_point[i][1] - path_point[i-1][1]) + ' '\n                    }\n\n                    console.log(path_string)\n\n                    var ppp = draw.path(path_string)\n                    // ppp.stroke({ color: '#f06', width: 4, linecap: 'round', linejoin: 'round' })\n                    ppp.fill('none')\n                    var length = ppp.length()\n\n                    var current = draw.circle(20).move(path_point[0][0]-10, path_point[0][1]-10)\n                    current.attr({fill: '#17f'})\n                    // current.animate(300).move(path_point[1][0]-10, path_point[1][1]-10).loop()\n                    // // current.finish()\n                    // current.animate(600).move(path_point[2][0]-10, path_point[2][1]-10).loop()\n\n                    // // rect.animate(3000).move(100, 100).after(function(situation) {\n                    // //     this.animate().attr({ fill: '#f06' })\n                    // // })\n\n                    current.animate(length*5, '<>').during(function(pos, morph, eased){\n                        var p = ppp.pointAt(eased * length)\n                        current.center(p.x, p.y)\n                    }).loop()\n\n\n                    for (var i = 0; i < keys.length; i++) {\n                        // select_path_point.push([this.points[keys[i]][0], this.points[keys[i]][1]])\n                        var x = this.points[keys[i]][0]\n                        var y = this.points[keys[i]][1]\n                        var text = draw.text(names[keys[i]]).move(x, y-10)\n                        text.stroke({ color: '#fff', opacity: 0.9, width: 3 })\n                        draw.text(names[keys[i]]).move(x, y-10)\n                    }\n                })\n                \n            })\n\n        })\n\n    },\n    created () {\n        this.group = this.$route.params.group\n        this.name = this.$route.params.name\n        this.items_string = this.$route.params.items\n    }\n\n\n}\n</script>\n\n<style scoped>\n\n.navbar {\n  background-color: #FDB849;\n  height: 60px;\n  position: fixed;\n  overflow: hidden;\n  width: 100%;\n  top: 0;\n}\n\n.navbar-menu {\n  margin-right: 0px !important;\n  margin-left: 0px;\n}\n\n.navbar-start {\n  padding-left: 12px;\n}\n\n.navbar-end {\n  padding-right: 10px;\n}\n</style>"]}]}